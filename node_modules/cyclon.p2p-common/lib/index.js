'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const AsyncExecService_1 = require("./AsyncExecService");
exports.AsyncExecService = AsyncExecService_1.AsyncExecService;
const InMemoryStorage_1 = require("./InMemoryStorage");
const ConsoleLogger_1 = require("./ConsoleLogger");
const GuidGenerator_1 = require("./GuidGenerator");
exports.generateGuid = GuidGenerator_1.GuidGenerator;
const ObfuscatingStorageWrapper_1 = require("./ObfuscatingStorageWrapper");
const UnreachableError_1 = require("./UnreachableError");
exports.UnreachableError = UnreachableError_1.UnreachableError;
const BufferingEventEmitter_1 = require("./BufferingEventEmitter");
exports.BufferingEventEmitter = BufferingEventEmitter_1.BufferingEventEmitter;
/**
 * Extract a random sample from an array of items using reservoir sampling
 */
function randomSample(inputArray, sampleSize) {
    const resultSet = [];
    for (let i = 0; i < inputArray.length; i++) {
        if (resultSet.length < sampleSize) {
            resultSet.push(inputArray[i]);
        }
        else {
            let insertAt = Math.floor(Math.random() * (i + 1));
            if (insertAt < resultSet.length) {
                resultSet[insertAt] = inputArray[i];
            }
        }
    }
    return resultSet;
}
exports.randomSample = randomSample;
/**
 * Convenience for checking the number of arguments to a function
 */
function checkArguments(argumentsArray, expectedCount) {
    if (argumentsArray.length !== expectedCount) {
        throw new Error("Invalid number of arguments provided for function! (expected " + expectedCount + ", got " + argumentsArray.length + ")");
    }
}
exports.checkArguments = checkArguments;
/**
 * Get the singleton console logger instance
 */
let loggerInstance = null;
function consoleLogger() {
    if (loggerInstance === null) {
        loggerInstance = new ConsoleLogger_1.ConsoleLogger();
    }
    return loggerInstance;
}
exports.consoleLogger = consoleLogger;
/**
 * Factory method for instances of the in-memory DOM storage API implementation
 */
function newInMemoryStorage() {
    return new InMemoryStorage_1.InMemoryStorage();
}
exports.newInMemoryStorage = newInMemoryStorage;
/**
 * Get the singleton AsyncExecService instance
 */
let asyncExecServiceInstance = null;
function asyncExecService() {
    if (asyncExecServiceInstance === null) {
        asyncExecServiceInstance = new AsyncExecService_1.AsyncExecService();
    }
    return asyncExecServiceInstance;
}
exports.asyncExecService = asyncExecService;
/**
 * Return the DOM storage object wrapped in an obfuscating decorator
 */
function obfuscateStorage(storage) {
    return new ObfuscatingStorageWrapper_1.ObfuscatingStorageWrapper(storage);
}
exports.obfuscateStorage = obfuscateStorage;
/**
 * Shuffle an array in place
 *
 * http://jsfromhell.com/array/shuffle [v1.0]
 */
function shuffleArray(inputArray) {
    //noinspection StatementWithEmptyBodyJS
    for (let j, x, i = inputArray.length; i; j = Math.floor(Math.random() * i),
        x = inputArray[--i], inputArray[i] = inputArray[j], inputArray[j] = x) {
    }
    return inputArray;
}
exports.shuffleArray = shuffleArray;
