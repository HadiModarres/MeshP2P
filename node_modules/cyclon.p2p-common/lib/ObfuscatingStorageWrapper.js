"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const aes_1 = __importDefault(require("crypto-js/aes"));
const hmac_md5_1 = __importDefault(require("crypto-js/hmac-md5"));
const enc_utf8_1 = __importDefault(require("crypto-js/enc-utf8"));
const GuidGenerator_1 = require("./GuidGenerator");
const SECRET_KEY_KEY = "___XX";
const wellKnownKey = "ce56c9aa-d287-4e7c-b9d5-edca7a985487";
/**
 * You don't need to be a genius to break this "security" but it should
 * slow tinkerers down a little
 */
class ObfuscatingStorageWrapper {
    constructor(storage) {
        this.storage = storage;
        this.getSecretKey();
    }
    getItem(key) {
        return this.decryptValue(this.storage.getItem(this.scrambleKey(key)));
    }
    setItem(key, value) {
        this.storage.setItem(this.scrambleKey(key), this.encryptValue(value));
    }
    removeItem(key) {
        this.storage.removeItem(this.scrambleKey(key));
    }
    clear() {
        this.storage.clear();
    }
    key(index) {
        return this.storage.key(index);
    }
    get length() {
        return this.storage.length;
    }
    decryptValue(value, encryptionKey = null) {
        if (value === null) {
            return null;
        }
        try {
            const decryptedValue = aes_1.default.decrypt(value, encryptionKey || this.getSecretKey()).toString(enc_utf8_1.default);
            return JSON.parse(decryptedValue);
        }
        catch (e) {
            return null;
        }
    }
    getSecretKey() {
        const secretKeyName = this.scrambleKey(SECRET_KEY_KEY, wellKnownKey);
        let secretKey = this.storage.getItem(secretKeyName);
        if (secretKey === null) {
            secretKey = GuidGenerator_1.GuidGenerator();
            this.storage.setItem(secretKeyName, this.encryptValue(secretKey, wellKnownKey));
        }
        else {
            secretKey = this.decryptValue(secretKey, wellKnownKey);
        }
        return secretKey;
    }
    scrambleKey(key, encryptionKey = null) {
        return hmac_md5_1.default(key, encryptionKey || this.getSecretKey()).toString();
    }
    encryptValue(value, encryptionKey = null) {
        return aes_1.default.encrypt(JSON.stringify(value), encryptionKey || this.getSecretKey()).toString();
    }
}
exports.ObfuscatingStorageWrapper = ObfuscatingStorageWrapper;
