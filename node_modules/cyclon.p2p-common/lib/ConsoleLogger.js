"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ConsoleLogger {
    constructor() {
        this.level = LoggerLevel.INFO;
    }
    error(...args) {
        if (this.loggingLevel(LoggerLevel.ERROR)) {
            console.error.apply(this, args);
        }
    }
    warn(...args) {
        if (this.loggingLevel(LoggerLevel.WARN)) {
            console.warn.apply(this, args);
        }
    }
    info(...args) {
        if (this.loggingLevel(LoggerLevel.INFO)) {
            console.info.apply(this, args);
        }
    }
    log(...args) {
        if (this.loggingLevel(LoggerLevel.INFO)) {
            console.log.apply(this, args);
        }
    }
    debug(...args) {
        if (this.loggingLevel(LoggerLevel.DEBUG)) {
            console.log.apply(this, args);
        }
    }
    setLevelToInfo() {
        this.setLevel(LoggerLevel.INFO);
    }
    setLevelToDebug() {
        this.setLevel(LoggerLevel.DEBUG);
    }
    setLevelToWarning() {
        this.setLevel(LoggerLevel.WARN);
    }
    setLevelToError() {
        this.setLevel(LoggerLevel.ERROR);
    }
    setLevel(newLevel) {
        this.level = newLevel;
    }
    loggingLevel(logLevel) {
        return logLevel >= this.level;
    }
}
exports.ConsoleLogger = ConsoleLogger;
var LoggerLevel;
(function (LoggerLevel) {
    LoggerLevel[LoggerLevel["DEBUG"] = 1] = "DEBUG";
    LoggerLevel[LoggerLevel["INFO"] = 2] = "INFO";
    LoggerLevel[LoggerLevel["WARN"] = 3] = "WARN";
    LoggerLevel[LoggerLevel["ERROR"] = 4] = "ERROR";
})(LoggerLevel || (LoggerLevel = {}));
