'use strict';

var DEFAULT_NUM_NEIGHBOURS = 10;
var DEFAULT_BOOTSTRAP_SIZE = 3;
var DEFAULT_SHUFFLE_SIZE = 8;
var DEFAULT_TICK_INTERVAL_MS = 10000;

var Utils = require("cyclon.p2p-common");

var CyclonNode = require("./CyclonNode");
var NeighbourSet = require("./NeighbourSet");
var LocalComms = require("./LocalComms");
var LocalBootstrap = require("./LocalBootstrap");
var LocalSimulation = require("./LocalSimulation");

/**
 * A builder for CyclonNode instances
 */
function CyclonNodeBuilder(comms, bootstrap) {

	Utils.checkArguments(arguments, 2);
	
	var numNeighbours = DEFAULT_NUM_NEIGHBOURS,
		bootstrapSize = DEFAULT_BOOTSTRAP_SIZE,
        shuffleSize = DEFAULT_SHUFFLE_SIZE,
		tickIntervalMs = DEFAULT_TICK_INTERVAL_MS,
		metadataProviders = {},
		asyncExecService = Utils.asyncExecService(),
		logger = Utils.consoleLogger(),
		storage = Utils.newInMemoryStorage();

	this.withLogger = function (newLogger) {
		logger = newLogger;
		return this;
	};

	this.withNumNeighbours = function (newNumNeighbours) {
		numNeighbours = newNumNeighbours;
		return this;
	};

    this.withBootstrapSize = function (newBootstrapSize) {
        bootstrapSize = newBootstrapSize;
        return this;
    };

	this.withShuffleSize = function (newShuffleSize) {
		shuffleSize = newShuffleSize;
		return this;
	};

	this.withStorage = function (newStorage) {
		storage = newStorage;
		return this;
	};

	this.withMetadataProviders = function (newMetadataProviders) {
		metadataProviders = newMetadataProviders; 
		return this;
	};

	this.withAsyncExecService = function (newAsyncExecService) {
		asyncExecService = newAsyncExecService;
		return this;
	};

	this.withTickIntervalMs = function (newTickIntervalMs) {
		tickIntervalMs = newTickIntervalMs;
		return this;
	};

	this.build = function () {
		var neighbours = new NeighbourSet(logger);
		return new CyclonNode(neighbours, numNeighbours, bootstrapSize, shuffleSize, comms, bootstrap,
			tickIntervalMs, metadataProviders, asyncExecService, logger, storage);
	};
}

module.exports.builder = function (comms, bootstrap) {
	return new CyclonNodeBuilder(comms, bootstrap);
};

module.exports.CyclonNode = CyclonNode;
module.exports.LocalBootstrap = LocalBootstrap;
module.exports.LocalComms = LocalComms;
module.exports.NeighbourSet = NeighbourSet;
module.exports.LocalSimulation = LocalSimulation;
